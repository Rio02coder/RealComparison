# Generated by Django 4.0.3 on 2022-04-04 05:15

import core.helpers.validators.date_validators
import core.models.user_models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=1000, validators=[django.core.validators.RegexValidator(message='Your first name must contain only letters!', regex='^[-a-zA-Z]+$')], verbose_name='First name')),
                ('last_name', models.CharField(max_length=1000, validators=[django.core.validators.RegexValidator(message='Your last name must contain only letters!', regex='^[-a-zA-Z]+$')], verbose_name='Last name')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None, validators=[django.core.validators.MinLengthValidator(4)], verbose_name='Phone number')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('service', models.CharField(choices=[('REMOTE', 'Remote'), ('UNSPLASH', 'Unsplash')], default='REMOTE', max_length=100)),
                ('date_joined', models.DateField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', core.models.user_models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=50)),
                ('street_address', models.CharField(max_length=250)),
                ('zipcode', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Zip code must only contain alphanumerics.', regex='^[a-zA-Z0-9]+$')])),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('has_garage', models.BooleanField(default=False)),
                ('has_cooling', models.BooleanField(default=False)),
                ('has_heating', models.BooleanField(default=False)),
                ('has_association', models.BooleanField(default=False)),
                ('num_of_bathrooms', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('num_of_bedrooms', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('num_of_stories', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('type', models.CharField(max_length=50)),
                ('year_built', models.IntegerField(blank=True, default='2022', null=True)),
                ('latest_sale_price', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('latest_sale_year', models.PositiveIntegerField(blank=True, default=2022, null=True, validators=[core.helpers.validators.date_validators.validate_year])),
                ('num_price_changes', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0)])),
                ('lot_size', models.FloatField(validators=[django.core.validators.MinValueValidator(100)])),
                ('living_area', models.FloatField(validators=[django.core.validators.MinValueValidator(100)])),
                ('avg_school_rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('avg_school_size', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('avg_school_distance', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('median_students_per_teacher', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('predicted_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('for_sale', models.BooleanField(default=False)),
                ('added_at', models.DateField(blank=True, null=True, validators=[core.helpers.validators.date_validators.validate_date])),
                ('is_verified', models.BooleanField(default=False)),
                ('image_urls', models.JSONField(blank=True, default=list)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator', to=settings.AUTH_USER_MODEL, to_field='email')),
                ('owner', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owner', to=settings.AUTH_USER_MODEL, to_field='email')),
            ],
            options={
                'ordering': ['-latest_sale_price'],
                'unique_together': {('latitude', 'longitude')},
            },
        ),
        migrations.CreateModel(
            name='PendingProperty',
            fields=[
                ('property_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.property')),
            ],
            bases=('core.property',),
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('key', models.CharField(max_length=500, primary_key=True, serialize=False)),
                ('used', models.BooleanField(default=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(100000), django.core.validators.MaxValueValidator(999999)])),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'property')},
            },
        ),
        migrations.CreateModel(
            name='UserPropertyViewCounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('time_stamp', models.FloatField(default=0.0)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'property')},
            },
        ),
        migrations.CreateModel(
            name='PropertyImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.property')),
            ],
            options={
                'unique_together': {('property', 'image')},
            },
        ),
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'property')},
            },
        ),
    ]
